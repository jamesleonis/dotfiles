" ===================
" James' VIM settings
" ===================

" Settings for VIM, not Vi
set nocompatible



" Plugins
" =======

" Vundle requires turning filetype off temporarily
filetype off

set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle must be initialized first
Plugin 'VundleVim/Vundle.vim'

""" BEGIN PLUGIN LIST

" CtrlP is a must have file utility
Plugin 'ctrlpvim/ctrlp.vim'
" great plugin for editing longform text
Plugin 'mikewest/vimroom'
" Friendlier editing of JSON
Plugin 'elzr/vim-json'
" includes SASS settings I like.
"Plugin 'tpope/vim-haml'
" Syntastic for error checking from the sidebar
Plugin 'scrooloose/syntastic'

" C++
""" Remember to compile with C support (in the YCM folder)
""" ./install.py --clang-completer
""NOTE: Not in use anymore
"Plugin 'Valloric/YouCompleteMe'

" Clojure
if !has('nvim')
  """ Fireplace for the REPL connection
  Plugin 'tpope/vim-fireplace'
  """ Better highlighting
  Plugin 'guns/vim-clojure-highlight'
  """ cljfmt
  Plugin 'venantius/vim-cljfmt'
else
  """ Conjure for the REPL connection
  Plugin 'Olical/conjure'
  Plugin 'bakpakin/fennel.vim'
  let g:conjure#mapping#prefix = "c"
endif
""" Slurp, Barf, and other structural editing
Plugin 'kovisoft/paredit'

" JS
""" Node.js love
"Plugin 'moll/vim-node'
""" JS highlighting + syntax
"Plugin 'pangloss/vim-javascript'
"Plugin 'jelera/vim-javascript-syntax'
""" Better autocomplete with YCM
"Plugin 'marijnh/tern_for_vim'

""" END PLUGIN LIST

" Finish up the plugin initialization
call vundle#end()
filetype plugin on



" Basics
" ======

" Go go gadget SYNTAX HIGHLIGHTING!
syntax on

" Get VIM to detect the type of file in the editor
filetype on

" Get VIM to load filetype specific features and indentation styles
filetype indent on

" My NEW favorite color scheme
colorscheme jellybeans

" The default popup menu colors are HORRENDUS! For the love of all that is
" good in this world, change them to not-horrible!
highlight Pmenu ctermbg=238 guibg=#202020
highlight PmenuSel gui=bold guibg=#303030 guifg=White


" Globals
" =======
let g:disable_insert_number_swap = 0

" Functions
" =========

function! SetRelativeNumbers(flag_on)
  if g:disable_insert_number_swap == 0
    if a:flag_on
      set relativenumber
    else
      set norelativenumber
    endif
  endif
endfunction


" Backup and swap files
" =====================

set backup
set swapfile
set backupdir=~/.vim/backup
set directory=~/.vim/backup



" Basic editor options
" ====================

" Kill the alarm bells
set visualbell
set noerrorbells

" Escape key delay is killing me!
set timeoutlen=1000
set ttimeoutlen=100

" Show the state of commands being entered
set showcmd

" Allow edited buffers to be hidden
set hidden

" Allow the mouse in the terminal
set mouse=a

" Show the location of the cursor
set ruler

" Do line wrapping...
set wrap

" ...but do it sensibly, like around whole words
set linebreak

" When line wrapping, wrap through the line number column. This makes it easy
" to know when a particular line is wrapped or not.
set cpoptions+=n

" Don't automatically format text to a limited width
set textwidth=0

" Turn tabs into spaces. I'm not partial, but MANY others are.
set expandtab

" If there are tabs, then they should be 2 spaces wide
set tabstop=2

" Tools will indend to 2 spaces (think >> and <<)
set shiftwidth=2

" If tabs are used in a position that isn't aligned with tabstop, then it will
" insert the correct number of spaces needed to get to the tabstop
set softtabstop=2

" Tools will insert the correct amount of tabs for autoindenting
set shiftround

" Be smart about handling tabs, even when they are handled with spaces
set smarttab

" Nothing is more annoying than doing everything by hand, like indentation
set smartindent

" Put the line numbers on the left hand side.
"    Vim 7.4 supports both options. Yay!
set number
set relativenumber

autocmd InsertEnter * call SetRelativeNumbers(0)
autocmd InsertLeave * call SetRelativeNumbers(1)

" Set the line number column width to 5 so it's not resizing itself when
" switching from relativenumber to number
" Yes, I work with files that are > 10,000 LOC
set numberwidth=6

" Highlight the matching brace, paren, bracket, etc. Helpful when in a nested
" part of the code and you are trying to match these things correctly.
set showmatch

" Highlight search matches. Use 'noh(lsearch)" to temporarily disable
" highlighting. Use 'set nohlsearch' to turn this off for the session.
set hlsearch

" Search incrementally, incredibly!
set incsearch

" VIM should remember what I did for a LOOOOOONG time...
set history=1000

" ...as well as be VERY forgiving
set undolevels=1000

" I don't want to worry about the case when searching or doing something
" else where case can trip me up...
set ignorecase

" ...except in those cases when I really DO want to know the case of what I'm
" searching for.
set smartcase

" Always show the status bar
set laststatus=2

" Turn on the wildmenu and be more productive TODAY! Only $FREE.99!
set wildmenu

" Make wildmenu GLORIOUS! Seriously!
set wildmode=list:longest,full

" I hate it when I scroll and the cursor isn't in the column I left it. I SAID STAY!
set nostartofline

" Try and keep some lines visible around the cursor when scrolling
set scrolloff=3

" Set backspace key to act like it's modern counterpart
set backspace+=start,eol,indent

" Show me the 80 character limit, even if I ignore it now and then
set colorcolumn=80

" Whitepace
highlight TrailingWhitespace ctermbg=red
autocmd InsertLeave * match TrailingWhitespace /\s\+$/
autocmd InsertEnter * match TrailingWhitespace //

" YouCompleteMe
" =============

set completeopt+=longest,menuone
set completeopt-=preview
let g:ycm_extra_conf_globlist = ['~/code/*','!~/*']

""" There is a crash in YCM for vagrant files. Disable for now.
autocmd BufNewFile,BufRead Vagrantfile let g:ycm_auto_trigger = 0



" CtrlP
" =====

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|node_modules|target|js/compiled)$',
  \ 'file': '\v\.(so|dat|DS_Store|swp|o)$'
  \ }



" Netrw
" =====

let g:netrw_list_hide= '\.swp$,\~,\.git,\.DS_Store'



" Diff
" ====

" Set diff mode to always split vertically and show filler lines
set diffopt=filler,vertical



" Clojure
" =======
autocmd BufNewFile,BufRead *.boot set filetype=clojure
autocmd FileType clojure let g:paredit_electric_return = 1
let g:clj_fmt_autosave = 0



" Ruby
" ====



" C++
" ===

autocmd FileType cpp set tabstop=4
autocmd FileType cpp set shiftwidth=4
autocmd FileType cpp set softtabstop=4



" PHP
" ===
autocmd FileType php set tabstop=4
autocmd FileType php set shiftwidth=4
autocmd FileType php set softtabstop=4



" HTML
" ====

" HTAs are special HTML files used to build Windows GUIs
autocmd BufNewFile,BufRead *.hta set filetype=html



" CSS
" ===



" Javascript
" ==========
"autocmd FileType javascript let tern_show_argument_hints = 'on_hold'
"autocmd FileType javascript set updatetime=1000
"autocmd filetype javascript let tern_show_signature_in_pum = 1
"autocmd filetype javascript let g:tern_request_timeout = 0.4
"autocmd filetype javascript highlight HangingOpenBraces ctermbg=red
"" Only apply this when in Normal mode
"autocmd InsertLeave javascript match HangingOpenBraces /^\s*{/
"" Clear the highlighting in Insert mode, because that's annoying
"autocmd InsertEnter javascript match HangingOpenBraces //



" Markdown
" ========

" Turn on spellcheck
autocmd FileType markdown,text set spell
autocmd FileType markdown,text set tabstop=4
autocmd FileType markdown,text set shiftwidth=4
autocmd FileType markdown,text set softtabstop=4
autocmd FileType markdown,text let g:disable_insert_number_swap = 1



" Custom commands
" ===============

" Change the directory to the current file's location
command Cdph cd %:p:h
